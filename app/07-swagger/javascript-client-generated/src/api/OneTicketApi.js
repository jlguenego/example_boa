/**
 * Ticket API
 * Ticket API for illustrating purpose.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jlguenego@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Ticket from '../model/Ticket';

/**
* OneTicket service.
* @module api/OneTicketApi
* @version 1.0.0
*/
export default class OneTicketApi {

    /**
    * Constructs a new OneTicketApi. 
    * @alias module:api/OneTicketApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTicket operation.
     * @callback module:api/OneTicketApi~createTicketCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an new ticket
     * Create an new ticket on multinline... 
     * @param {Object} opts Optional parameters
     * @param {module:model/Ticket} opts.ticket a ticket
     * @param {module:api/OneTicketApi~createTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createTicket(opts, callback) {
      opts = opts || {};
      let postBody = opts['ticket'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/tickets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTicket operation.
     * @callback module:api/OneTicketApi~deleteTicketCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing ticket.
     * Delete an existing ticket.
     * @param {String} id ticket id
     * @param {module:api/OneTicketApi~deleteTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTicket(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTicket");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/tickets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveTicket operation.
     * @callback module:api/OneTicketApi~retrieveTicketCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single ticket
     * Retrieve a ticket
     * @param {String} id ticket id
     * @param {module:api/OneTicketApi~retrieveTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    retrieveTicket(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveTicket");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/tickets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTicket operation.
     * @callback module:api/OneTicketApi~updateTicketCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an new ticket
     * Update a ticket
     * @param {String} id ticket id
     * @param {Object} opts Optional parameters
     * @param {module:model/Ticket} opts.ticket a ticket
     * @param {module:api/OneTicketApi~updateTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTicket(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ticket'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTicket");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/tickets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
